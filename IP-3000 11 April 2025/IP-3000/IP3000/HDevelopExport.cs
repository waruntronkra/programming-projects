//
// File generated by HDevelop for HALCON/.NET (C#) Version 22.11.3.0
// Non-ASCII strings in this file are encoded in local-8-bit encoding (cp1252).
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//

using HalconDotNet;

namespace HDevCropImage
{

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
  public HDevelopExport()
  {
    // Default settings used in HDevelop
    HOperatorSet.SetSystem("width", 512);
    HOperatorSet.SetSystem("height", 512);
    if (HalconAPI.isWindows)
      HOperatorSet.SetSystem("use_window_thread","true");
            HImage outhImage;
    action(out outhImage);
  }
#endif

  //Note global variables cannot be shared across exports with different namespace
#if !NO_EXPORT_MAIN
  // Main procedure 
  private void action(out HImage hImage)
  {
    // Local iconic variables 
    HObject ho_RefImage;
    HObject ho_ROI;
    HObject ho_ImageReduced;
    HObject ho_ModelContours;
    HObject ho_Image=null;
    HObject ho_Objects = null;
    HObject ho_ImagePart=null;

    // Local control variables 
    //HTuple hv_ImageDirectory = new HTuple(); 
    HTuple hv_master_img = new HTuple();
    HTuple hv_SaveImageDirectory = new HTuple();
    HTuple hv_ModelID = new HTuple();
    HTuple hv_CropWidth = new HTuple();
    HTuple hv_CropHeight = new HTuple();
    HTuple hv_i = new HTuple();
    HTuple hv_MatchResultID = new HTuple();
    HTuple hv_NumMatchResult = new HTuple();
    HTuple hv_rows = new HTuple();
    HTuple hv_cols = new HTuple();
    HTuple hv_m = new HTuple();
    HTuple hv_r1 = new HTuple();
    HTuple hv_r2 = new HTuple();
    HTuple hv_c1 = new HTuple();
    HTuple hv_c2 = new HTuple();
    HTuple hv_FileName = new HTuple();

    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_RefImage);
    HOperatorSet.GenEmptyObj(out ho_ROI);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);

    HOperatorSet.GenEmptyObj(out ho_ModelContours);
    HOperatorSet.GenEmptyObj(out ho_Image);
    HOperatorSet.GenEmptyObj(out ho_Objects);
    HOperatorSet.GenEmptyObj(out ho_ImagePart);
    //** Set Image Directory
    //***ImageDirectory := 'D:/IP3000/DL/20240920/200900016/'
    //hv_ImageDirectory.Dispose();
    //hv_ImageDirectory = "D:/IP3000/DL/20241022/b00000001";

    //* Master folder
    hv_master_img.Dispose();
    hv_master_img = "D:/IP3000/master";
    hv_SaveImageDirectory.Dispose();
    hv_SaveImageDirectory = "D:/IP3000/Test Save Image";

    //*Master Image
    ho_RefImage.Dispose();
    HOperatorSet.ReadImage(out ho_RefImage, "D:/IP3000/master/200900011-1-{1_1-1_12}.jpg");

    //**** Gen training image
    ho_ROI.Dispose();
    HOperatorSet.GenRectangle1(out ho_ROI, 149.581, 160.797, 629.84, 734.048);
    ho_ImageReduced.Dispose();
    HOperatorSet.ReduceDomain(ho_RefImage, ho_ROI, out ho_ImageReduced);

    hv_ModelID.Dispose();
    HOperatorSet.CreateGenericShapeModel(out hv_ModelID);
    //Set the training parameters.
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "num_levels", 0);
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "optimization", "none");
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "iso_scale_min", 0.8);
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "iso_scale_max", 1.2);

    HOperatorSet.TrainGenericShapeModel(ho_ImageReduced, hv_ModelID);
    ho_ModelContours.Dispose();
    HOperatorSet.GetGenericShapeModelObject(out ho_ModelContours, hv_ModelID, "contours");

    //Set the search parameters.
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "max_overlap", 0.7);
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "min_score", 0.15);
    HOperatorSet.SetGenericShapeModelParam(hv_ModelID, "greediness", 0.7);

    //**** Create fix Crop ROI
    hv_CropWidth.Dispose();
    hv_CropHeight.Dispose();
    hv_CropWidth = 960;
    hv_CropHeight = 768;

    //list_files (ImageDirectory, 'files', Files)
    hv_i.Dispose();
    hv_i = 0;
    //for i := 0 to |Files|-1 by 1
      //read_image (Image, Files[i])
      ho_Image.Dispose();
      HOperatorSet.ReadImage(out ho_Image, "D:/IP3000/DL/20240920/200900016/200900016-1-{1_1-1_12}.jpg");
      hv_MatchResultID.Dispose();hv_NumMatchResult.Dispose();
      HOperatorSet.FindGenericShapeModel(ho_RefImage, hv_ModelID, out hv_MatchResultID, out hv_NumMatchResult);
      ho_Objects.Dispose();
      HOperatorSet.GetGenericShapeModelResultObject(out ho_Objects, hv_MatchResultID, "all", "contours");
      hv_rows.Dispose();
      HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, "all", "row", out hv_rows);
      hv_cols.Dispose();
      HOperatorSet.GetGenericShapeModelResult(hv_MatchResultID, "all", "column", out hv_cols);

      for (hv_m=0; (int)hv_m<=(int)((new HTuple(hv_rows.TupleLength()))-1); hv_m = (int)hv_m + 1)
      {
        hv_r1.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
            hv_r1 = (hv_rows.TupleSelect(hv_m))-(hv_CropHeight/2);
        }
        hv_r2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
            hv_r2 = (hv_rows.TupleSelect(hv_m))+(hv_CropHeight/2);
        }
        hv_c1.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
            hv_c1 = (hv_cols.TupleSelect(hv_m))-(hv_CropWidth/2);
        }
        hv_c2.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
            hv_c2 = (hv_cols.TupleSelect(hv_m))+(hv_CropWidth/2);
        }
        ho_ImagePart.Dispose();
        HOperatorSet.CropRectangle1(ho_Image, out ho_ImagePart, hv_r1, hv_c1, hv_r2, hv_c2);
        hv_FileName.Dispose();
        using (HDevDisposeHelper dh = new HDevDisposeHelper())
        {
            hv_FileName = ((((hv_SaveImageDirectory + "/") + (hv_i + 1)) + "_") + (hv_m + 1)) + ".jpg";
        }
        HOperatorSet.WriteImage(ho_ImagePart, "jpeg", 0, hv_FileName);
      }

    //endfor

    ho_RefImage.Dispose();
    ho_ROI.Dispose();
    ho_ImageReduced.Dispose();
    //ho_InputImage.Dispose();
    ho_ModelContours.Dispose();
    ho_Image.Dispose();
    ho_Objects.Dispose();
    ho_ImagePart.Dispose();

    //hv_ImageDirectory.Dispose();
    hv_master_img.Dispose();
    hv_SaveImageDirectory.Dispose();
    hv_ModelID.Dispose();
    hv_CropWidth.Dispose();
    hv_CropHeight.Dispose();
    hv_i.Dispose();
    hv_MatchResultID.Dispose();
    hv_NumMatchResult.Dispose();
    hv_rows.Dispose();
    hv_cols.Dispose();
    hv_m.Dispose();
    hv_r1.Dispose();
    hv_r2.Dispose();
    hv_c1.Dispose();
    hv_c2.Dispose();
    hv_FileName.Dispose();

  }

#endif


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
//public class HDevelopExportApp
//{
//  static void Main(string[] args)
//  {
//    new HDevelopExport();
//  }
//}
#endif

} // end namespace

